#!/usr/bin/env python3
"""
WhatsApp Messaging Automation - Console Version
This is a simplified console-based version of the WhatsApp automation app
designed to demonstrate the functionality without requiring a GUI or Windows.
"""

import os
import sys
import json
import time
import pandas as pd
from pathlib import Path

# Configuration
CONFIG_FILE = 'whatsapp_config.json'
PHONE_NUMBERS_FILE = 'phone_numbers.csv'

class ConsoleWhatsAppAutomation:
    def __init__(self):
        self.config = self.load_config()
        self.messages = {}
        
    def load_config(self):
        """Load configuration from file or create default."""
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r') as f:
                    return json.load(f)
            except:
                pass
        
        # Default configuration
        return {
            'coordinate_x': 0,
            'coordinate_y': 0,
            'security_number': '',
            'autohotkey_installed': False,
            'whatsapp_installed': False
        }
    
    def save_config(self):
        """Save configuration to file."""
        with open(CONFIG_FILE, 'w') as f:
            json.dump(self.config, f, indent=2)
        print(f"\nConfiguration saved to {CONFIG_FILE}")
    
    def process_csv(self, filename):
        """Process CSV file with phone numbers."""
        try:
            if not os.path.exists(filename):
                print(f"File not found: {filename}")
                return False
                
            df = pd.read_csv(filename)
            
            if 'Numero de Telefone' not in df.columns:
                print("CSV file must contain a 'Numero de Telefone' column.")
                return False
                
            # Display the phone numbers
            print("\nPhone numbers from CSV:")
            for i, row in df.iterrows():
                print(f"  {i+1}. {row['Numero de Telefone']}")
                
            # Save the processed CSV for future use
            df.to_csv(PHONE_NUMBERS_FILE, index=False)
            print(f"\nProcessed {len(df)} phone numbers and saved to {PHONE_NUMBERS_FILE}")
            return True
        except Exception as e:
            print(f"Error processing CSV: {str(e)}")
            return False
    
    def generate_script(self):
        """Generate a sample AutoHotkey script."""
        if not self.config['security_number']:
            print("Error: Security number not configured.")
            return False
            
        if not os.path.exists(PHONE_NUMBERS_FILE):
            print(f"Error: No phone numbers found. Please process a CSV file first.")
            return False
            
        # Read phone numbers
        df = pd.read_csv(PHONE_NUMBERS_FILE)
        
        # Generate script content
        script_content = "; WhatsApp Automation Script\n"
        script_content += "; Generated by WhatsApp Messaging Automation Tool\n\n"
        
        # Add script for each phone number
        for i, row in df.iterrows():
            phone_number = str(row['Numero de Telefone']).strip()
            set_letter = chr(65 + (i % 4))  # A, B, C, D rotation
            
            script_content += f"\n; Processing number {phone_number}\n"
            script_content += f"Sleep 1000\n"
            script_content += f"WinActivate, ahk_exe chrome.exe\n"
            script_content += f"Sleep 2000\n"
            script_content += f"Send !{{Space}}\n"
            script_content += f"Send {{x}}\n"
            script_content += f"Sleep 2000\n"
            script_content += f"Send !{{d}}\n"
            script_content += f"Sleep 1000\n"
            script_content += f"Send https://api.whatsapp.com/send/?phone={self.config['security_number']}\n"
            script_content += f"Sleep 1000\n"
            script_content += f"Send {{Enter}}\n"
            script_content += f"Sleep 3000\n"
            script_content += f"MouseMove {self.config['coordinate_x']}, {self.config['coordinate_y']}, 10\n"
            script_content += f"Sleep 4000\n"
            script_content += f"MouseClick, Left, {self.config['coordinate_x']}, {self.config['coordinate_y']}\n"
            
            # Add message blocks for the current message set
            for j in range(1, 5):
                msg_key = f'msg{j}{set_letter}'
                if msg_key in self.messages and self.messages[msg_key].strip():
                    script_content += f"\nSleep 1000\n"
                    script_content += f"Send {{{self.messages[msg_key]}}}\n"
                    script_content += f"Sleep 1000\n"
                    script_content += f"Send {{Enter}}\n"
        
        # Save the script
        script_file = f"whatsapp_automation_{int(time.time())}.ahk"
        with open(script_file, 'w') as f:
            f.write(script_content)
            
        print(f"\nScript generated and saved to {script_file}")
        print("This script can be run on a Windows system with AutoHotkey installed.")
        return True
    
    def run(self):
        """Main application flow."""
        while True:
            self.show_menu()
            choice = input("\nEnter your choice (1-7): ").strip()
            
            if choice == '1':
                self.check_dependencies()
            elif choice == '2':
                self.configure_coordinates()
            elif choice == '3':
                self.configure_security_number()
            elif choice == '4':
                self.configure_messages()
            elif choice == '5':
                self.import_csv()
            elif choice == '6':
                self.generate_script()
            elif choice == '7':
                print("\nExiting application. Goodbye!")
                break
            else:
                print("\nInvalid choice. Please try again.")
            
            input("\nPress Enter to continue...")
    
    def show_menu(self):
        """Display the main menu."""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("=" * 60)
        print("  WHATSAPP MESSAGING AUTOMATION - CONSOLE VERSION")
        print("=" * 60)
        print(f"  Current Configuration:")
        print(f"    - AutoHotkey Installed: {'Yes' if self.config['autohotkey_installed'] else 'No'}")
        print(f"    - WhatsApp Desktop Installed: {'Yes' if self.config['whatsapp_installed'] else 'No'}")
        print(f"    - Message Field Coordinates: ({self.config['coordinate_x']}, {self.config['coordinate_y']})")
        print(f"    - Security Number: {self.config['security_number'] or 'Not set'}")
        print(f"    - Messages Configured: {len(self.messages)} message(s)")
        print(f"    - CSV File Processed: {'Yes' if os.path.exists(PHONE_NUMBERS_FILE) else 'No'}")
        print("=" * 60)
        print("  MENU:")
        print("  1. Check Dependencies")
        print("  2. Configure Message Field Coordinates")
        print("  3. Configure Security Number")
        print("  4. Configure Messages")
        print("  5. Import CSV with Phone Numbers")
        print("  6. Generate AutoHotkey Script")
        print("  7. Exit")
        print("=" * 60)
    
    def check_dependencies(self):
        """Simulate checking for dependencies."""
        print("\nChecking dependencies...")
        
        # Simulate checking for AutoHotkey
        print("Checking for AutoHotkey...")
        self.config['autohotkey_installed'] = True
        print("✓ AutoHotkey is installed (simulated)")
        
        # Simulate checking for WhatsApp Desktop
        print("Checking for WhatsApp Desktop...")
        self.config['whatsapp_installed'] = True
        print("✓ WhatsApp Desktop is installed (simulated)")
        
        self.save_config()
    
    def configure_coordinates(self):
        """Configure message field coordinates."""
        print("\nConfigure Message Field Coordinates")
        print("In the actual application, you would open WhatsApp and capture the coordinates")
        print("of the message input field. For this simulation, please enter coordinates manually.")
        
        try:
            x = int(input("\nEnter X coordinate: ").strip())
            y = int(input("Enter Y coordinate: ").strip())
            
            self.config['coordinate_x'] = x
            self.config['coordinate_y'] = y
            
            print(f"\nCoordinates set to: ({x}, {y})")
            self.save_config()
        except ValueError:
            print("\nInvalid input. Please enter numeric values for coordinates.")
    
    def configure_security_number(self):
        """Configure security number."""
        print("\nConfigure Security Number")
        print("The security number should be in the format of a valid phone number with country code,")
        print("without any spaces or special characters (e.g., 551234567890).")
        
        security_number = input("\nEnter security number: ").strip()
        
        if not security_number:
            print("Error: Security number cannot be empty.")
            return
            
        if not security_number.isdigit():
            print("Error: Security number should contain only digits.")
            return
            
        self.config['security_number'] = security_number
        print(f"\nSecurity number set to: {security_number}")
        self.save_config()
    
    def configure_messages(self):
        """Configure message templates."""
        print("\nConfigure Message Templates")
        print("You will configure 4 messages for each message set (A, B, C, D).")
        print("These message sets will be used in rotation for each phone number.")
        
        for set_letter in ['A', 'B', 'C', 'D']:
            print(f"\nMessage Set {set_letter}:")
            
            for i in range(1, 5):
                msg_key = f'msg{i}{set_letter}'
                current = self.messages.get(msg_key, '')
                
                print(f"\nMessage {i}{set_letter} {f'[Current: {current}]' if current else ''}")
                message = input(f"Enter message {i}{set_letter} (press Enter to skip or keep current): ").strip()
                
                if message:  # Only update if a value was entered
                    self.messages[msg_key] = message
        
        # Save messages to config
        with open('messages.json', 'w') as f:
            json.dump(self.messages, f, indent=2)
            
        print(f"\n{len(self.messages)} message(s) configured and saved.")
    
    def import_csv(self):
        """Import CSV with phone numbers."""
        print("\nImport CSV with Phone Numbers")
        print("The CSV file should have a column named 'Numero de Telefone'")
        
        filename = input("\nEnter CSV filename: ").strip()
        if not filename:
            return
            
        self.process_csv(filename)

if __name__ == "__main__":
    print("WhatsApp Messaging Automation - Console Version")
    print("This is a simulation of the full Windows desktop application.")
    print("It allows you to demonstrate the workflow without requiring")
    print("Windows-specific features or GUI components.")
    print("\nNote: The actual script generation and automation requires:")
    print("  - Windows operating system")
    print("  - AutoHotkey installed")
    print("  - WhatsApp Desktop installed")
    
    app = ConsoleWhatsAppAutomation()
    app.run()