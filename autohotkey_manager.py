import os
import subprocess
import requests
import tempfile
import time
from urllib.parse import urlparse

class AutoHotkeyManager:
    def __init__(self, scripts_dir, temp_dir):
        self.scripts_dir = scripts_dir
        self.temp_dir = temp_dir
        self.ahk_exe_path = None
        self.sleep_times = {
            'sleep_1': 1000,  # 1 second
            'sleep_2': 2000,  # 2 seconds
            'sleep_3': 3000,  # 3 seconds
            'sleep_4': 4000   # 4 seconds
        }
    
    def is_autohotkey_installed(self):
        """Check if AutoHotkey is installed on the system."""
        # Common installation paths for AutoHotkey
        possible_paths = [
            r"C:\Program Files\AutoHotkey\AutoHotkey.exe",
            r"C:\Program Files (x86)\AutoHotkey\AutoHotkey.exe",
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.ahk_exe_path = path
                return True
                
        # Check if it's in PATH
        try:
            result = subprocess.run(['where', 'AutoHotkey.exe'], 
                                  capture_output=True, 
                                  text=True, 
                                  check=False)
            if result.returncode == 0:
                self.ahk_exe_path = result.stdout.strip().split('\n')[0]
                return True
        except:
            pass
            
        return False
    
    def install_autohotkey(self, callback=None):
        """Download and install AutoHotkey silently."""
        try:
            # Download URL for AutoHotkey installer
            download_url = "https://www.autohotkey.com/download/ahk-install.exe"
            
            # Download the installer
            if callback:
                callback("Downloading AutoHotkey...")
                
            response = requests.get(download_url, stream=True)
            
            if response.status_code != 200:
                return False, "Failed to download AutoHotkey."
                
            # Save the installer to a temporary file
            installer_path = os.path.join(self.temp_dir, "ahk-install.exe")
            with open(installer_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # Run the installer silently
            if callback:
                callback("Installing AutoHotkey silently...")
                
            subprocess.run([installer_path, "/S"], check=True)
            
            # Wait for installation to complete
            time.sleep(5)
            
            # Check if the installation was successful
            if self.is_autohotkey_installed():
                os.remove(installer_path)  # Clean up
                return True, "AutoHotkey installed successfully."
            else:
                return False, "AutoHotkey installation failed. Please install it manually."
                
        except Exception as e:
            return False, f"Error installing AutoHotkey: {str(e)}"
    
    def is_whatsapp_desktop_installed(self):
        """Check if WhatsApp Desktop is installed."""
        # Common installation paths for WhatsApp Desktop
        possible_paths = [
            os.path.join(os.getenv('LOCALAPPDATA'), 'WhatsApp', 'WhatsApp.exe'),
            os.path.join(os.getenv('PROGRAMFILES'), 'WhatsApp', 'WhatsApp.exe'),
            os.path.join(os.getenv('PROGRAMFILES(X86)'), 'WhatsApp', 'WhatsApp.exe')
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return True
        return False
    
    def generate_message_block(self, message, index):
        """Generate AutoHotkey script block for a message."""
        if not message or message.strip() == "":
            return ""
            
        # Replace any Windows newlines with AHK-compatible ones
        message = message.replace('\r\n', '{Enter}').replace('\n', '{Enter}')
        
        block = f"""
Sleep {self.sleep_times['sleep_1']}
Send {{{message}}}
Sleep {self.sleep_times['sleep_1']}
Send {{Enter}}
"""
        return block.strip()
    
    def generate_script(self, settings, phone_numbers, messages):
        """Generate the AutoHotkey script based on user inputs."""
        if not settings or not phone_numbers:
            return False, "Missing settings or phone numbers."
            
        coord_x = settings['coordinate_x']
        coord_y = settings['coordinate_y']
        security_number = settings['security_number']
        
        script_content = """
; WhatsApp Automation Script
; Generated by WhatsApp Messaging Automation Tool
#NoEnv
#SingleInstance Force
SetWorkingDir %A_ScriptDir%
SetBatchLines -1
CoordMode, Mouse, Screen

"""
        
        # Generate script for each phone number
        message_set_index = 0
        for phone_id, phone_number, _ in phone_numbers:
            # Use A, B, C, D message sets in rotation
            set_letter = chr(65 + (message_set_index % 4))  # ASCII 65 = 'A', 66 = 'B', etc.
            
            # Security number part
            script_content += f"""
; Processing number {phone_number}
Sleep {self.sleep_times['sleep_1']}
WinActivate, ahk_exe chrome.exe
WinWaitActive, ahk_exe chrome.exe
Sleep {self.sleep_times['sleep_2']}
Send !{{Space}}
Send {{x}}
Sleep {self.sleep_times['sleep_2']}
Send !{{d}}
Sleep {self.sleep_times['sleep_1']}
Send https://api.whatsapp.com/send/?phone={security_number}
Sleep {self.sleep_times['sleep_1']}
Send {{Enter}}
Sleep {self.sleep_times['sleep_3']}
MouseMove {coord_x}, {coord_y}, 10
Sleep {self.sleep_times['sleep_4']}
MouseClick, Left, {coord_x}, {coord_y}
Sleep {self.sleep_times['sleep_4']}
Send +.
Sleep {self.sleep_times['sleep_4']}
Send {{Enter}}
Sleep {self.sleep_times['sleep_1']}
"""

            # Actual number part
            script_content += f"""
WinActivate, ahk_exe chrome.exe
WinWaitActive, ahk_exe chrome.exe
Sleep {self.sleep_times['sleep_2']}
Send !{{Space}}
Send {{x}}
Sleep {self.sleep_times['sleep_2']}
Send !{{d}}
Sleep {self.sleep_times['sleep_1']}
Send https://api.whatsapp.com/send/?phone={phone_number}
Sleep {self.sleep_times['sleep_1']}
Send {{Enter}}
Sleep {self.sleep_times['sleep_4']}
"""

            # Add message blocks for this number
            for i in range(1, 5):
                msg_key = f'msg{i}{set_letter}'
                if msg_key in messages and messages[msg_key].strip():
                    block = self.generate_message_block(messages[msg_key], i)
                    if block:
                        script_content += block + "\n"
            
            message_set_index += 1
            
        # Save the script
        timestamp = int(time.time())
        script_path = os.path.join(self.scripts_dir, f"whatsapp_automation_{timestamp}.ahk")
        
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
            
        return True, script_path
    
    def run_script(self, script_path, callback=None):
        """Run the generated AutoHotkey script."""
        if not self.ahk_exe_path or not os.path.exists(self.ahk_exe_path):
            if not self.is_autohotkey_installed():
                return False, "AutoHotkey is not installed."
        
        try:
            if callback:
                callback("Running AutoHotkey script...")
                
            # Run the script using AutoHotkey
            subprocess.Popen([self.ahk_exe_path, script_path])
            
            return True, "Script started successfully."
        except Exception as e:
            return False, f"Error running script: {str(e)}"
